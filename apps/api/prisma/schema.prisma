// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  customer
  agent
  admin
}

enum TicketStatus {
  Open
  Pending
  Resolved
  Closed
}

enum TicketPriority {
  Low
  Medium
  High
  Urgent
}

enum MessageType {
  text
  file
  system
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String
  role         UserRole @default(customer)
  status       String   @default("active")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ticketsCreated    Ticket[]     @relation("CustomerTickets")
  ticketsAssigned   Ticket[]     @relation("AssignedTickets")
  messages          Message[]
  filesUploaded     FileAsset[]
  auditLogs         AuditLog[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tickets Ticket[]

  @@map("departments")
}

model Ticket {
  id           String         @id @default(cuid())
  subject      String
  description  String
  status       TicketStatus   @default(Open)
  priority     TicketPriority @default(Medium)
  customerId   String
  assigneeId   String?
  departmentId String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  customer   User       @relation("CustomerTickets", fields: [customerId], references: [id])
  assignee   User?      @relation("AssignedTickets", fields: [assigneeId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  room       Room?
  messages   Message[]
  rating     Rating?

  @@map("tickets")
}

model Room {
  id        String   @id @default(cuid())
  ticketId  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  ticket   Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("rooms")
}

model Message {
  id        String      @id @default(cuid())
  roomId    String
  senderId  String
  type      MessageType @default(text)
  content   String
  fileId    String?
  createdAt DateTime    @default(now())

  // Relations
  room   Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User      @relation(fields: [senderId], references: [id])
  file   FileAsset? @relation(fields: [fileId], references: [id])

  @@index([roomId, createdAt])
  @@map("messages")
}

model FileAsset {
  id         String   @id @default(cuid())
  filename   String
  mime       String
  size       Int
  url        String
  uploaderId String
  createdAt  DateTime @default(now())

  // Relations
  uploader User      @relation(fields: [uploaderId], references: [id])
  messages Message[]

  @@map("file_assets")
}

model Rating {
  id        String   @id @default(cuid())
  ticketId  String   @unique
  score     Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  action     String
  targetType String
  targetId   String?
  meta       Json?
  createdAt  DateTime @default(now())

  // Relations
  actor User @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
