import sql from 'mssql';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: 'env.local' });
dotenv.config();

const config = {
  user: 'thien',
  password: '1909',
  server: 'localhost',
  database: 'live_support',
  options: {
    encrypt: false,
    trustServerCertificate: true,
  },
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000,
  },
};

async function seedDatabase() {
  try {
    console.log('üå± Starting database seeding...');
    
    // Connect to database
    await sql.connect(config);
    console.log('‚úÖ Connected to SQL Server');

    // 1. Seed Departments
    console.log('üìã Seeding Departments...');
    const departments = [
      { name: 'Payment', description: 'Thanh to√°n v√† ho√†n ti·ªÅn', priority: 'Urgent' },
      { name: 'Order & Shipping', description: 'ƒê∆°n h√†ng v√† v·∫≠n chuy·ªÉn', priority: 'High' },
      { name: 'Product & Return', description: 'S·∫£n ph·∫©m v√† ƒë·ªïi tr·∫£', priority: 'Medium' },
      { name: 'Technical Support', description: 'H·ªó tr·ª£ k·ªπ thu·∫≠t', priority: 'Low' },
      { name: 'General Inquiry', description: 'C√¢u h·ªèi chung', priority: 'Medium' }
    ];

    for (const dept of departments) {
      try {
        await sql.query`
          INSERT INTO Departments (DepartmentName, Description, Priority, IsActive, CreatedAt)
          VALUES (${dept.name}, ${dept.description}, ${dept.priority}, 1, GETDATE())
        `;
        console.log(`‚úÖ Department created: ${dept.name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Department ${dept.name} might already exist`);
      }
    }

    // 2. Seed Categories
    console.log('üì¶ Seeding Categories...');
    const categories = [
      { name: 'Clothing', description: 'Qu·∫ßn √°o v√† ph·ª• ki·ªán', isActive: 1 },
      { name: 'Beauty', description: 'M·ªπ ph·∫©m v√† chƒÉm s√≥c da', isActive: 1 },
      { name: 'Home', description: 'ƒê·ªì gia d·ª•ng v√† trang tr√≠', isActive: 1 },
      { name: 'Electronics', description: 'ƒêi·ªán t·ª≠ v√† c√¥ng ngh·ªá', isActive: 1 },
      { name: 'Books', description: 'S√°ch v√† t√†i li·ªáu', isActive: 1 }
    ];

    for (const cat of categories) {
      try {
        await sql.query`
          INSERT INTO Categories (CategoryName, Description, IsActive, CreatedAt)
          VALUES (${cat.name}, ${cat.description}, ${cat.isActive}, GETDATE())
        `;
        console.log(`‚úÖ Category created: ${cat.name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Category ${cat.name} might already exist`);
      }
    }

    // 3. Seed Shops
    console.log('üè™ Seeding Shops...');
    const shops = [
      { name: 'MUJI Fashion Store', description: 'C·ª≠a h√†ng th·ªùi trang MUJI', email: 'fashion@muji.com', phone: '1900-123-456' },
      { name: 'MUJI Beauty Store', description: 'C·ª≠a h√†ng m·ªπ ph·∫©m MUJI', email: 'beauty@muji.com', phone: '1900-123-457' },
      { name: 'MUJI Home Store', description: 'C·ª≠a h√†ng ƒë·ªì gia d·ª•ng MUJI', email: 'home@muji.com', phone: '1900-123-458' },
      { name: 'MUJI Electronics Store', description: 'C·ª≠a h√†ng ƒëi·ªán t·ª≠ MUJI', email: 'electronics@muji.com', phone: '1900-123-459' },
      { name: 'MUJI Books Store', description: 'C·ª≠a h√†ng s√°ch MUJI', email: 'books@muji.com', phone: '1900-123-460' }
    ];

    for (const shop of shops) {
      try {
        await sql.query`
          INSERT INTO Shops (ShopName, Description, Email, Phone, IsActive, CreatedAt)
          VALUES (${shop.name}, ${shop.description}, ${shop.email}, ${shop.phone}, 1, GETDATE())
        `;
        console.log(`‚úÖ Shop created: ${shop.name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Shop ${shop.name} might already exist`);
      }
    }

    // 4. Seed Products
    console.log('üõçÔ∏è Seeding Products...');
    const products = [
      { name: '√Åo thun cotton c∆° b·∫£n', description: '√Åo thun cotton 100% ch·∫•t l∆∞·ª£ng cao', price: 299000, categoryId: 1, shopId: 1 },
      { name: 'Kem d∆∞·ª°ng da ban ƒë√™m', description: 'Kem d∆∞·ª°ng da ban ƒë√™m cho da kh√¥', price: 450000, categoryId: 2, shopId: 2 },
      { name: 'B·ªô ch√©n ƒëƒ©a g·ªëm s·ª©', description: 'B·ªô ch√©n ƒëƒ©a g·ªëm s·ª© handmade', price: 850000, categoryId: 3, shopId: 3 },
      { name: 'Tai nghe kh√¥ng d√¢y', description: 'Tai nghe kh√¥ng d√¢y ch·ªëng ·ªìn', price: 1200000, categoryId: 4, shopId: 4 },
      { name: 'S√°ch thi·∫øt k·∫ø n·ªôi th·∫•t', description: 'S√°ch h∆∞·ªõng d·∫´n thi·∫øt k·∫ø n·ªôi th·∫•t', price: 180000, categoryId: 5, shopId: 5 }
    ];

    for (const product of products) {
      try {
        await sql.query`
          INSERT INTO Products (ProductName, Description, Price, CategoryID, ShopID, IsActive, CreatedAt)
          VALUES (${product.name}, ${product.description}, ${product.price}, ${product.categoryId}, ${product.shopId}, 1, GETDATE())
        `;
        console.log(`‚úÖ Product created: ${product.name}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Product ${product.name} might already exist`);
      }
    }

    // 5. Seed Sample Tickets
    console.log('üé´ Seeding Sample Tickets...');
    const tickets = [
      { 
        subject: 'H√†ng b·ªã l·ªói', 
        description: 'S·∫£n ph·∫©m nh·∫≠n ƒë∆∞·ª£c b·ªã h·ªèng, c·∫ßn ƒë·ªïi tr·∫£', 
        customerId: 3, 
        departmentId: 3, 
        priority: 'High',
        status: 'Open'
      },
      { 
        subject: 'Thanh to√°n kh√¥ng th√†nh c√¥ng', 
        description: 'Kh√¥ng th·ªÉ thanh to√°n b·∫±ng th·∫ª t√≠n d·ª•ng', 
        customerId: 3, 
        departmentId: 1, 
        priority: 'Urgent',
        status: 'Pending'
      },
      { 
        subject: 'ƒê∆°n h√†ng ch∆∞a nh·∫≠n ƒë∆∞·ª£c', 
        description: 'ƒê·∫∑t h√†ng 3 ng√†y r·ªìi ch∆∞a th·∫•y ship', 
        customerId: 3, 
        departmentId: 2, 
        priority: 'High',
        status: 'Open'
      }
    ];

    for (const ticket of tickets) {
      try {
        // Generate ticket number
        const ticketNumber = `TKT${Date.now().toString().slice(-6)}`;
        
        await sql.query`
          INSERT INTO Tickets (TicketNumber, Subject, Description, Status, Priority, CustomerID, DepartmentID, CreatedAt)
          VALUES (${ticketNumber}, ${ticket.subject}, ${ticket.description}, ${ticket.status}, ${ticket.priority}, ${ticket.customerId}, ${ticket.departmentId}, GETDATE())
        `;
        console.log(`‚úÖ Ticket created: ${ticketNumber} - ${ticket.subject}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Ticket ${ticket.subject} might already exist`);
      }
    }

    // 6. Seed Chat Rooms
    console.log('üí¨ Seeding Chat Rooms...');
    const chatRooms = [
      { customerId: 3, shopId: 1, roomName: 'MUJI Fashion Store - Customer Support' },
      { customerId: 3, shopId: 2, roomName: 'MUJI Beauty Store - Customer Support' },
      { customerId: 3, shopId: 3, roomName: 'MUJI Home Store - Customer Support' }
    ];

    for (const room of chatRooms) {
      try {
        await sql.query`
          INSERT INTO ChatRooms (CustomerID, ShopID, RoomName, IsActive, CreatedAt)
          VALUES (${room.customerId}, ${room.shopId}, ${room.roomName}, 1, GETDATE())
        `;
        console.log(`‚úÖ Chat room created: ${room.roomName}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Chat room ${room.roomName} might already exist`);
      }
    }

    // 7. Seed Sample Messages
    console.log('üìù Seeding Sample Messages...');
    const messages = [
      { roomId: 1, senderId: 3, senderType: 'Customer', messageText: 'Xin ch√†o! T√¥i c√≥ v·∫•n ƒë·ªÅ v·ªõi ƒë∆°n h√†ng √°o thun cotton' },
      { roomId: 1, senderId: 2, senderType: 'Agent', messageText: 'Xin ch√†o! T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n v·ªÅ v·∫•n ƒë·ªÅ n√†y. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt chi ti·∫øt kh√¥ng?' },
      { roomId: 1, senderId: 3, senderType: 'Customer', messageText: '√Åo b·ªã l·ªói ƒë∆∞·ªùng may, t√¥i mu·ªën ƒë·ªïi size kh√°c' },
      { roomId: 1, senderId: 2, senderType: 'Agent', messageText: 'T√¥i hi·ªÉu r·ªìi. Ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ b·∫°n ƒë·ªïi size. B·∫°n c√≥ th·ªÉ g·ª≠i ·∫£nh s·∫£n ph·∫©m kh√¥ng?' },
      { roomId: 2, senderId: 3, senderType: 'Customer', messageText: 'Kem d∆∞·ª°ng da c√≥ ph√π h·ª£p v·ªõi da nh·∫°y c·∫£m kh√¥ng?' },
      { roomId: 2, senderId: 2, senderType: 'Agent', messageText: 'Kem n√†y r·∫•t ph√π h·ª£p v·ªõi da nh·∫°y c·∫£m. B·∫°n c√≥ th·ªÉ th·ª≠ sample tr∆∞·ªõc khi mua' }
    ];

    for (const message of messages) {
      try {
        await sql.query`
          INSERT INTO Messages (RoomID, SenderID, SenderType, MessageText, IsRead, CreatedAt)
          VALUES (${message.roomId}, ${message.senderId}, ${message.senderType}, ${message.messageText}, 0, GETDATE())
        `;
        console.log(`‚úÖ Message created: ${message.messageText.substring(0, 30)}...`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Message might already exist`);
      }
    }

    // 8. Seed Sample Orders
    console.log('üì¶ Seeding Sample Orders...');
    const orders = [
      { 
        customerId: 3, 
        shopId: 1, 
        status: 'Pending',
        totalAmount: 299000,
        shippingAddress: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
        paymentMethod: 'COD',
        notes: 'Giao h√†ng v√†o bu·ªïi chi·ªÅu'
      },
      { 
        customerId: 3, 
        shopId: 2, 
        status: 'Shipped',
        totalAmount: 450000,
        shippingAddress: '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM',
        paymentMethod: 'Bank Transfer',
        notes: 'ƒê√£ thanh to√°n'
      }
    ];

    for (const order of orders) {
      try {
        const orderNumber = `ORD${Date.now().toString().slice(-8)}`;
        
        const orderResult = await sql.query`
          INSERT INTO Orders (OrderNumber, CustomerID, ShopID, Status, TotalAmount, ShippingAddress, PaymentMethod, Notes, CreatedAt)
          VALUES (${orderNumber}, ${order.customerId}, ${order.shopId}, ${order.status}, ${order.totalAmount}, ${order.shippingAddress}, ${order.paymentMethod}, ${order.notes}, GETDATE())
          SELECT SCOPE_IDENTITY() as OrderID
        `;
        
        const orderId = orderResult.recordset[0].OrderID;
        
        // Add order items
        await sql.query`
          INSERT INTO OrderItems (OrderID, ProductID, Quantity, Price, TotalPrice, CreatedAt)
          VALUES (${orderId}, ${order.shopId}, 1, ${order.totalAmount}, ${order.totalAmount}, GETDATE())
        `;
        
        console.log(`‚úÖ Order created: ${orderNumber} - ${order.status}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Order might already exist`);
      }
    }

    // 9. Seed Sample Cart Items
    console.log('üõí Seeding Sample Cart Items...');
    const cartItems = [
      { customerId: 3, productId: 1, quantity: 2 },
      { customerId: 3, productId: 3, quantity: 1 },
      { customerId: 3, productId: 5, quantity: 3 }
    ];

    for (const item of cartItems) {
      try {
        await sql.query`
          INSERT INTO ShoppingCart (CustomerID, ProductID, Quantity, CreatedAt)
          VALUES (${item.customerId}, ${item.productId}, ${item.quantity}, GETDATE())
        `;
        console.log(`‚úÖ Cart item created: Product ${item.productId} x${item.quantity}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Cart item might already exist`);
      }
    }

    console.log('üéâ Database seeding completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
  } finally {
    // Close connection pool
    console.log('üîå Database connection closed');
  }
}

// Run seeding
seedDatabase().catch(console.error);
