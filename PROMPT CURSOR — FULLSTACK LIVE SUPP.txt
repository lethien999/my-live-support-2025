PROMPT CURSOR — FULLSTACK LIVE SUPPORT (FE + BE)
PROMPT DÁN VÀO CURSOR — FULLSTACK LIVE SUPPORT (FE + BE)

Bạn là tech lead trong Cursor. Dựng hệ thống Hỗ Trợ Khách Hàng Trực Tuyến (Live Support) fullstack. Tự động sinh mã, cấu hình, và tài liệu theo yêu cầu dưới đây. Không hỏi lại. Kết quả: monorepo chạy npm run dev khởi động web và api; có Docker Postgres; có mock mode; có tài liệu theo chuẩn IEEE tối thiểu 10 trích dẫn.

0) Mục tiêu
- Chat realtime qua WebSocket/Socket.IO: phòng chat, typing, gửi file, seen, retry kết nối
- Ticket + hàng đợi: Open/Pending/Resolved/Closed, phân công agent, chuyển tiếp, kết thúc phiên, reopen, SLA cơ bản
- Auth bảo mật: JWT access + refresh, RBAC (customer/agent/admin), reset password/OTP, policy mật khẩu, WS auth + ACL theo room
- Upload file: kiểm MIME/size, lưu FileAsset, link tải bảo vệ
- Đánh giá: rating 1–5 khi ticket Closed, thống kê mức độ hài lòng
- Observability: log/audit, metrics cơ bản
- Tài liệu đồ án: kiến trúc, ERD đạt 3NF, use case + sequence, test plan, an ninh, hiệu năng, 10+ trích dẫn IEEE

1) Kiến trúc monorepo
- Root: my-live-support-2025/
  - Workspaces: apps/*, packages/*
  - Scripts root:
    - dev: chạy web + api + db
    - build, start, lint, format
- apps/web: Vite + React + TypeScript, React Router v6, Redux Toolkit, Axios, Socket.IO client, Tailwind, Zod + React Hook Form, Dayjs, classnames
- apps/api: Node + Express + TypeScript, Prisma ORM + PostgreSQL, Socket.IO, Zod, JWT, Multer, Helmet, CORS, Rate-limit, Winston logger
- packages/shared: types chung và hằng số sự kiện socket

Alias: @/* -> src/* cho web và api. ESLint + Prettier đồng bộ.

2) Backend (apps/api)
Dependencies
- runtime: express cors helmet morgan zod jsonwebtoken bcryptjs cookie-parser multer uuid socket.io dayjs dotenv prisma @prisma/client http-errors express-rate-limit winston
- dev: typescript ts-node-dev @types/node @types/express @types/cookie-parser @types/jsonwebtoken @types/bcryptjs @types/multer @types/http-errors

ENV (apps/api/.env)
PORT=4000
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/live_support?schema=public"
JWT_SECRET=devsecret
JWT_REFRESH_SECRET=devrefresh
JWT_EXPIRES=15m
JWT_REFRESH_EXPIRES=7d
CORS_ORIGIN=http://localhost:5173
UPLOAD_DIR=uploads
NODE_ENV=development

Docker (root docker-compose.yml)
- Service db: postgres:16, port 5432, volume pgdata, env: POSTGRES_USER=postgres, POSTGRES_PASSWORD=postgres, POSTGRES_DB=live_support

Cấu trúc apps/api/src/
app.ts
server.ts
config/{env.ts,logger.ts}
libs/{prisma.ts}
middleware/{auth.ts,errors.ts,rateLimit.ts}
sockets/{index.ts,chatGateway.ts}
routes/{index.ts,auth.routes.ts,users.routes.ts,tickets.routes.ts,files.routes.ts,ratings.routes.ts}
controllers/{auth.controller.ts,users.controller.ts,tickets.controller.ts,files.controller.ts,ratings.controller.ts}
services/{auth.service.ts,users.service.ts,tickets.service.ts,files.service.ts,queue.service.ts}
validators/{auth.schema.ts,ticket.schema.ts,rating.schema.ts}
types/{express.d.ts}

Prisma schema (apps/api/prisma/schema.prisma)
- User { id, email@unique, passwordHash, name, role enum(customer|agent|admin), status, createdAt, updatedAt }
- Department { id, name@unique }
- Ticket { id, subject, description, status enum(Open|Pending|Resolved|Closed), priority enum(Low|Medium|High|Urgent), customerId, assigneeId?, departmentId?, createdAt, updatedAt }
- Room { id, ticketId@unique, isActive, createdAt }
- Message { id, roomId, senderId, type enum(text|file|system), content, fileId?, createdAt, @@index([roomId, createdAt]) }
- FileAsset { id, filename, mime, size, url, uploaderId, createdAt }
- Rating { id, ticketId@unique, score Int @db.SmallInt, comment, createdAt }
- AuditLog { id, actorId, action, targetType, targetId, meta Json, createdAt }

Tạo migration init và seed: 1 admin, 2 agent, 1 customer mẫu, 1 department, vài ticket demo.

API bắt buộc
- POST /api/auth/register (Zod validate)
- POST /api/auth/login → { accessToken, refreshToken, user }
- POST /api/auth/refresh → cấp token mới
- POST /api/auth/forgot → phát OTP giả (log)
- POST /api/auth/reset → đặt lại mật khẩu với OTP
- GET /api/auth/me
- GET /api/tickets (filter: status, priority, assignee, customer, q, paging)
- POST /api/tickets → auto tạo Room
- GET /api/tickets/:id
- PATCH /api/tickets/:id (status, assignee, department)
- POST /api/files (multipart file), trả FileAsset
- POST /api/ratings (cho ticket Closed)
- Middleware: requireAuth, requireRole('agent'|'admin')

Socket.IO
- Namespace /ws
- Hằng số sự kiện import từ packages/shared:
  - CHAT_JOIN {roomId}
  - CHAT_LEAVE
  - MESSAGE_SEND {roomId,type,content,fileId?}
  - MESSAGE_RECEIVE
  - TYPING {roomId,isTyping}
  - TICKET_UPDATED
  - QUEUE_UPDATED
- Xác thực bằng JWT trong handshake. ChatGateway kiểm soát truy cập room theo ticket. Lưu Message rồi broadcast.

Bảo mật
- Helmet, CORS theo CORS_ORIGIN, Rate-limit 100/15m cho /api/
- Log JSON với Winston. Ẩn PII, không log token/mật khẩu
- AuditLog cho hành động nhạy cảm

Scripts API
- dev: ts-node-dev --respawn src/server.ts
- build: tsc -p .
- start: node dist/server.js
- prisma:migrate, prisma:seed, prisma:studio

3) Shared (packages/shared)
- Types: UserRole, TicketStatus, TicketPriority, MessageType, Room, Message, Ticket, FileAsset
- socketEvents.ts: export chuỗi sự kiện
- Publish nội bộ qua workspace, dùng trong web và api

4) Frontend (apps/web)
Dependencies
react-router-dom @reduxjs/toolkit react-redux axios socket.io-client zod react-hook-form @hookform/resolvers dayjs classnames
Dev: tailwindcss postcss autoprefixer eslint prettier eslint-config-prettier eslint-plugin-react eslint-plugin-react-hooks

ENV (apps/web/.env)
VITE_API_BASE_URL=http://localhost:4000/api
VITE_WS_URL=http://localhost:4000/ws
VITE_ENABLE_MOCK=true

Cấu trúc apps/web/src/
assets/{images,icons}
components/
  ui/{Button,Input,Modal,Avatar,Textarea,Toast}.tsx
  chat/{ChatWindow,MessageList,MessageItem,Composer,TypingIndicator,FilePreview}.tsx
  common/{Spinner,Empty,ConfirmDialog,OfflineBadge}.tsx
layout/{AppLayout.tsx,AuthLayout.tsx,AdminLayout.tsx}
hooks/{useAuth.ts,useSocket.ts,useUpload.ts,usePagination.ts}
pages/
  Home/index.tsx
  Auth/{Login.tsx,Register.tsx,ForgotPassword.tsx}
  Chat/{CustomerChat.tsx,AgentChat.tsx}
  Tickets/{TicketsList.tsx,TicketDetail.tsx}
  Admin/{Dashboard.tsx,Agents.tsx,Departments.tsx,Settings.tsx}
  NotFound.tsx
store/
  slices/{authSlice.ts,chatSlice.ts,ticketSlice.ts,queueSlice.ts,uiSlice.ts}
  index.ts
routes/
  guard/{RequireAuth.tsx,RequireRole.tsx}
  {publicRoutes.ts,privateRoutes.ts,index.tsx}
services/
  {http.ts,socket.ts,authService.ts,userService.ts,ticketService.ts,chatService.ts,uploadService.ts,notificationService.ts,ratingService.ts}
config/{env.ts,theme.ts,constants.ts,roles.ts}
types/{auth.ts,user.ts,ticket.ts,chat.ts,common.ts}
utils/{date.ts,file.ts,debounce.ts,storage.ts}
styles/globals.css
App.tsx
main.tsx

Router
- Public: /, /login, /register, /forgot-password
- Private: /chat, /agent/chat, /tickets, /tickets/:id, /admin

Mock mode
- Khi VITE_ENABLE_MOCK=true: thay service bằng bộ nhớ cục bộ, socket.ts dùng EventEmitter tạo MESSAGE_RECEIVE ngẫu nhiên 3–8s, lưu lịch sử theo roomId trong localStorage

UI
- Navbar có trạng thái socket, avatar, theme toggle
- Chat: gửi text/file giả, typing indicator, autoscroll, seen stub
- Tickets: filter, paging client, link chi tiết

5) Tài liệu đồ án (tự sinh vào thư mục /docs)
- README.md: cách chạy, kiến trúc, cấu trúc thư mục, quyết định kỹ thuật
- REPORT.md + REPORT.docx: dàn ý chương mục hoàn chỉnh:
  1. Giới thiệu bài toán và mục tiêu
  2. Tổng quan nghiên cứu liên quan
  3. Kiến trúc hệ thống (FE/BE/DB/WS)
  4. Thiết kế CSDL đạt 3NF (ERD + lược đồ quan hệ + ràng buộc, khóa, chỉ mục)
  5. Thiết kế chức năng: use case, sequence (dạng Mermaid)
  6. Bảo mật: JWT+refresh, ACL room, rate-limit, Helmet/CORS/CSP, ẩn PII, audit
  7. Kiểm thử: unit, integration, e2e cơ bản; test tải nhẹ
  8. Kết quả và đánh giá hiệu năng
  9. Kết luận và hướng phát triển
- figures/: ERD.mmd, sequence-login.mmd, sequence-chat.mmd
- REFERENCES.bib + REFERENCES-IEEE.md: tối thiểu 10 trích dẫn định dạng IEEE (tạo placeholder và hướng dẫn điền DOI)
- SWAGGER.json và /api/docs phục vụ swagger-ui-express
- POSTMAN_collection.json và api.http

6) Kiểm thử và chất lượng
- Web: Vitest + Testing Library. Test render Login, dispatch message → MessageList tăng
- API: Jest. Test auth, tickets CRUD, quyền truy cập room
- Lint, format, CI script cục bộ
- Metrics tối thiểu: số phiên, tin nhắn/phút, TTR (time-to-response)

7) DevOps
- docker compose up -d khởi động Postgres
- Scripts root:
  - dev: docker compose up -d db + chạy web và api song song
  - build, start
  - db:up, db:down, db:studio
- Seed tài khoản:
  - admin@demo.io / admin123
  - agent1@demo.io / agent123
  - user@demo.io / user123

8) Acceptance criteria
- npm run dev hiển thị:
  - API: http://localhost:4000
  - Web: http://localhost:5173
- Đăng nhập mock hoạt động khi VITE_ENABLE_MOCK=true. Khi false, hoạt động với Postgres + Prisma
- Tạo ticket mới, mở phòng chat, gửi/nhận tin nhắn realtime, đánh dấu typing
- Upload file hoạt động, lưu FileAsset
- Đánh giá ticket đã đóng
- Swagger phục vụ tại /api/docs
- /docs đầy đủ nội dung nêu trên với 10+ trích dẫn IEEE

9) Việc cần Cursor thực thi tuần tự
1. Khởi tạo monorepo và workspaces; thiết lập ESLint/Prettier chung
2. Sinh apps/api với Prisma schema, migration, seed, routes, sockets, middleware; cấu hình Docker Postgres
3. Sinh apps/web với cấu trúc, pages, store, services; Tailwind; mock mode
4. Sinh packages/shared với types và socketEvents
5. Tạo tài liệu trong /docs gồm REPORT.md, REPORT.docx, Mermaid, Swagger, Postman, references
6. Tạo scripts root và hướng dẫn chạy trong README
7. Chạy: docker compose up -d, npm i, npm --workspace apps/api run prisma:migrate, npm --workspace apps/api run prisma:seed, npm run dev
8. In ra URL, tài khoản seed, và checklist pass/fail theo Acceptance criteria

NOTES & FIXES

TypeScript Configuration Issues
Vấn đề: Lỗi rootDir trong apps/api/tsconfig.json
- Lỗi: File prisma/seed.ts không nằm trong rootDir './src'
- Nguyên nhân: Include prisma/**/* nhưng rootDir chỉ là ./src
- Giải pháp: Loại bỏ "prisma/**/*" khỏi include array
- Lý do: File seed.ts là script độc lập, không cần compile cùng source code chính
- Cách chạy seed: npm run prisma:seed hoặc ts-node prisma/seed.ts

Cấu hình đúng:
{
  "include": ["src/**/*"],  // Chỉ include source code chính
  "exclude": ["node_modules", "dist"]
}

Best Practices cho TypeScript Config
1. rootDir chỉ nên chứa source code chính của ứng dụng
2. Scripts riêng biệt (như seed, migration) nên có tsconfig riêng hoặc chạy trực tiếp
3. Include patterns phải tương thích với rootDir
4. Exclude các thư mục không cần thiết để tăng performance